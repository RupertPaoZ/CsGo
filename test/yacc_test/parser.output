Terminals unused in grammar

    DOT
    COLON
    AND
    OR
    NOT
    FOR


Grammar

    0 $accept: program $end

    1 program: decl_list

    2 decl_list: decl_list decl
    3          | decl

    4 decl: var_decl
    5     | fun_decl

    6 var_decl: type_specifier IDENTIFIER SEMI
    7         | type_specifier IDENTIFIER LB INTEGER RB SEMI

    8 type_specifier: SYS_TYPE

    9 fun_decl: FUNC IDENTIFIER LP params RP LP params RP compound_stmt

   10 params: param_list
   11       | VOID

   12 param_list: param_list COMMA param
   13           | param

   14 param: IDENTIFIER type_specifier
   15      | IDENTIFIER LB RB type_specifier

   16 compound_stmt: LCP local_decls stmt_list RCP

   17 local_decls: local_decls var_decl
   18            | %empty

   19 stmt_list: stmt_list stmt
   20          | %empty

   21 stmt: expr_stmt
   22     | compound_stmt
   23     | selection_stmt
   24     | iteration_stmt
   25     | return_stmt

   26 expr_stmt: simple_expr SEMI
   27          | SEMI

   28 selection_stmt: IF LP expr RP stmt
   29               | IF LP expr RP stmt ELSE stmt

   30 iteration_stmt: WHILE LP expr RP stmt

   31 return_stmt: RETURN SEMI
   32            | RETURN INTEGER SEMI
   33            | RETURN FLOAT SEMI
   34            | RETURN expr SEMI

   35 expr: var_list ASSIGN expr_list

   36 expr_list: expr_list COMMA simple_expr
   37          | simple_expr

   38 var_list: var COMMA var_list
   39         | var
   40         | UNDERSCORE

   41 var: IDENTIFIER

   42 simple_expr: additive_expr relop additive_expr
   43            | additive_expr

   44 relop: LE
   45      | LT
   46      | GT
   47      | GE
   48      | EQUAL
   49      | UNEQUAL

   50 additive_expr: additive_expr addop term
   51              | term

   52 addop: PLUS
   53      | MINUS

   54 term: term mulop factor
   55     | factor

   56 mulop: MUL
   57      | DIV
   58      | MOD

   59 factor: LP simple_expr RP
   60       | var
   61       | call
   62       | FLOAT
   63       | INTEGER

   64 call: IDENTIFIER LP args RP

   65 args: arg_list
   66     | %empty

   67 arg_list: arg_list COMMA simple_expr
   68         | simple_expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    LP (258) 9 28 29 30 59 64
    RP (259) 9 28 29 30 59 64
    LB (260) 7 15
    RB (261) 7 15
    LCP (262) 16
    RCP (263) 16
    DOT (264)
    COMMA (265) 12 36 38 67
    COLON (266)
    UNDERSCORE (267) 40
    MUL (268) 56
    DIV (269) 57
    PLUS (270) 52
    MINUS (271) 53
    MOD (272) 58
    GE (273) 47
    GT (274) 46
    LE (275) 44
    LT (276) 45
    EQUAL (277) 48
    UNEQUAL (278) 49
    ASSIGN (279) 35
    SEMI (280) 6 7 26 27 31 32 33 34
    AND (281)
    OR (282)
    NOT (283)
    IF (284) 28 29
    ELSE (285) 29
    WHILE (286) 30
    FOR (287)
    FUNC (288) 9
    RETURN (289) 31 32 33 34
    INTEGER <iVal> (290) 7 32 63
    IDENTIFIER <sVal> (291) 6 7 9 14 15 41 64
    SYS_TYPE <sVal> (292) 8
    VOID <sVal> (293) 11
    FLOAT <fVal> (294) 33 62
    LOWER_THAN_ELSE (295)


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    program <sVal> (42)
        on left: 1
        on right: 0
    decl_list <sVal> (43)
        on left: 2 3
        on right: 1 2
    decl <sVal> (44)
        on left: 4 5
        on right: 2 3
    var_decl <sVal> (45)
        on left: 6 7
        on right: 4 17
    type_specifier <sVal> (46)
        on left: 8
        on right: 6 7 14 15
    fun_decl <sVal> (47)
        on left: 9
        on right: 5
    params <sVal> (48)
        on left: 10 11
        on right: 9
    param_list <sVal> (49)
        on left: 12 13
        on right: 10 12
    param (50)
        on left: 14 15
        on right: 12 13
    compound_stmt <sVal> (51)
        on left: 16
        on right: 9 22
    local_decls <sVal> (52)
        on left: 17 18
        on right: 16 17
    stmt_list <sVal> (53)
        on left: 19 20
        on right: 16 19
    stmt <sVal> (54)
        on left: 21 22 23 24 25
        on right: 19 28 29 30
    expr_stmt <sVal> (55)
        on left: 26 27
        on right: 21
    selection_stmt <sVal> (56)
        on left: 28 29
        on right: 23
    iteration_stmt <sVal> (57)
        on left: 30
        on right: 24
    return_stmt <sVal> (58)
        on left: 31 32 33 34
        on right: 25
    expr <sVal> (59)
        on left: 35
        on right: 28 29 30 34
    expr_list (60)
        on left: 36 37
        on right: 35 36
    var_list <sVal> (61)
        on left: 38 39 40
        on right: 35 38
    var <sVal> (62)
        on left: 41
        on right: 38 39 60
    simple_expr <sVal> (63)
        on left: 42 43
        on right: 26 36 37 59 67 68
    relop (64)
        on left: 44 45 46 47 48 49
        on right: 42
    additive_expr <sVal> (65)
        on left: 50 51
        on right: 42 43 50
    addop (66)
        on left: 52 53
        on right: 50
    term <sVal> (67)
        on left: 54 55
        on right: 50 51 54
    mulop (68)
        on left: 56 57 58
        on right: 54
    factor <sVal> (69)
        on left: 59 60 61 62 63
        on right: 54 55
    call (70)
        on left: 64
        on right: 61
    args <sVal> (71)
        on left: 65 66
        on right: 64
    arg_list <sVal> (72)
        on left: 67 68
        on right: 65 67


State 0

    0 $accept: . program $end
    1 program: . decl_list
    2 decl_list: . decl_list decl
    3          | . decl
    4 decl: . var_decl
    5     | . fun_decl
    6 var_decl: . type_specifier IDENTIFIER SEMI
    7         | . type_specifier IDENTIFIER LB INTEGER RB SEMI
    8 type_specifier: . SYS_TYPE
    9 fun_decl: . FUNC IDENTIFIER LP params RP LP params RP compound_stmt

    FUNC      shift, and go to state 1
    SYS_TYPE  shift, and go to state 2

    program         go to state 3
    decl_list       go to state 4
    decl            go to state 5
    var_decl        go to state 6
    type_specifier  go to state 7
    fun_decl        go to state 8


State 1

    9 fun_decl: FUNC . IDENTIFIER LP params RP LP params RP compound_stmt

    IDENTIFIER  shift, and go to state 9


State 2

    8 type_specifier: SYS_TYPE .

    $default  reduce using rule 8 (type_specifier)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 10


State 4

    1 program: decl_list .  [$end]
    2 decl_list: decl_list . decl
    4 decl: . var_decl
    5     | . fun_decl
    6 var_decl: . type_specifier IDENTIFIER SEMI
    7         | . type_specifier IDENTIFIER LB INTEGER RB SEMI
    8 type_specifier: . SYS_TYPE
    9 fun_decl: . FUNC IDENTIFIER LP params RP LP params RP compound_stmt

    FUNC      shift, and go to state 1
    SYS_TYPE  shift, and go to state 2

    $default  reduce using rule 1 (program)

    decl            go to state 11
    var_decl        go to state 6
    type_specifier  go to state 7
    fun_decl        go to state 8


State 5

    3 decl_list: decl .

    $default  reduce using rule 3 (decl_list)


State 6

    4 decl: var_decl .

    $default  reduce using rule 4 (decl)


State 7

    6 var_decl: type_specifier . IDENTIFIER SEMI
    7         | type_specifier . IDENTIFIER LB INTEGER RB SEMI

    IDENTIFIER  shift, and go to state 12


State 8

    5 decl: fun_decl .

    $default  reduce using rule 5 (decl)


State 9

    9 fun_decl: FUNC IDENTIFIER . LP params RP LP params RP compound_stmt

    LP  shift, and go to state 13


State 10

    0 $accept: program $end .

    $default  accept


State 11

    2 decl_list: decl_list decl .

    $default  reduce using rule 2 (decl_list)


State 12

    6 var_decl: type_specifier IDENTIFIER . SEMI
    7         | type_specifier IDENTIFIER . LB INTEGER RB SEMI

    LB    shift, and go to state 14
    SEMI  shift, and go to state 15


State 13

    9 fun_decl: FUNC IDENTIFIER LP . params RP LP params RP compound_stmt
   10 params: . param_list
   11       | . VOID
   12 param_list: . param_list COMMA param
   13           | . param
   14 param: . IDENTIFIER type_specifier
   15      | . IDENTIFIER LB RB type_specifier

    IDENTIFIER  shift, and go to state 16
    VOID        shift, and go to state 17

    params      go to state 18
    param_list  go to state 19
    param       go to state 20


State 14

    7 var_decl: type_specifier IDENTIFIER LB . INTEGER RB SEMI

    INTEGER  shift, and go to state 21


State 15

    6 var_decl: type_specifier IDENTIFIER SEMI .

    $default  reduce using rule 6 (var_decl)


State 16

    8 type_specifier: . SYS_TYPE
   14 param: IDENTIFIER . type_specifier
   15      | IDENTIFIER . LB RB type_specifier

    LB        shift, and go to state 22
    SYS_TYPE  shift, and go to state 2

    type_specifier  go to state 23


State 17

   11 params: VOID .

    $default  reduce using rule 11 (params)


State 18

    9 fun_decl: FUNC IDENTIFIER LP params . RP LP params RP compound_stmt

    RP  shift, and go to state 24


State 19

   10 params: param_list .  [RP]
   12 param_list: param_list . COMMA param

    COMMA  shift, and go to state 25

    $default  reduce using rule 10 (params)


State 20

   13 param_list: param .

    $default  reduce using rule 13 (param_list)


State 21

    7 var_decl: type_specifier IDENTIFIER LB INTEGER . RB SEMI

    RB  shift, and go to state 26


State 22

   15 param: IDENTIFIER LB . RB type_specifier

    RB  shift, and go to state 27


State 23

   14 param: IDENTIFIER type_specifier .

    $default  reduce using rule 14 (param)


State 24

    9 fun_decl: FUNC IDENTIFIER LP params RP . LP params RP compound_stmt

    LP  shift, and go to state 28


State 25

   12 param_list: param_list COMMA . param
   14 param: . IDENTIFIER type_specifier
   15      | . IDENTIFIER LB RB type_specifier

    IDENTIFIER  shift, and go to state 16

    param  go to state 29


State 26

    7 var_decl: type_specifier IDENTIFIER LB INTEGER RB . SEMI

    SEMI  shift, and go to state 30


State 27

    8 type_specifier: . SYS_TYPE
   15 param: IDENTIFIER LB RB . type_specifier

    SYS_TYPE  shift, and go to state 2

    type_specifier  go to state 31


State 28

    9 fun_decl: FUNC IDENTIFIER LP params RP LP . params RP compound_stmt
   10 params: . param_list
   11       | . VOID
   12 param_list: . param_list COMMA param
   13           | . param
   14 param: . IDENTIFIER type_specifier
   15      | . IDENTIFIER LB RB type_specifier

    IDENTIFIER  shift, and go to state 16
    VOID        shift, and go to state 17

    params      go to state 32
    param_list  go to state 19
    param       go to state 20


State 29

   12 param_list: param_list COMMA param .

    $default  reduce using rule 12 (param_list)


State 30

    7 var_decl: type_specifier IDENTIFIER LB INTEGER RB SEMI .

    $default  reduce using rule 7 (var_decl)


State 31

   15 param: IDENTIFIER LB RB type_specifier .

    $default  reduce using rule 15 (param)


State 32

    9 fun_decl: FUNC IDENTIFIER LP params RP LP params . RP compound_stmt

    RP  shift, and go to state 33


State 33

    9 fun_decl: FUNC IDENTIFIER LP params RP LP params RP . compound_stmt
   16 compound_stmt: . LCP local_decls stmt_list RCP

    LCP  shift, and go to state 34

    compound_stmt  go to state 35


State 34

   16 compound_stmt: LCP . local_decls stmt_list RCP
   17 local_decls: . local_decls var_decl
   18            | . %empty

    $default  reduce using rule 18 (local_decls)

    local_decls  go to state 36


State 35

    9 fun_decl: FUNC IDENTIFIER LP params RP LP params RP compound_stmt .

    $default  reduce using rule 9 (fun_decl)


State 36

    6 var_decl: . type_specifier IDENTIFIER SEMI
    7         | . type_specifier IDENTIFIER LB INTEGER RB SEMI
    8 type_specifier: . SYS_TYPE
   16 compound_stmt: LCP local_decls . stmt_list RCP
   17 local_decls: local_decls . var_decl
   19 stmt_list: . stmt_list stmt
   20          | . %empty  [LP, LCP, RCP, SEMI, IF, WHILE, RETURN, INTEGER, IDENTIFIER, FLOAT]

    SYS_TYPE  shift, and go to state 2

    $default  reduce using rule 20 (stmt_list)

    var_decl        go to state 37
    type_specifier  go to state 7
    stmt_list       go to state 38


State 37

   17 local_decls: local_decls var_decl .

    $default  reduce using rule 17 (local_decls)


State 38

   16 compound_stmt: . LCP local_decls stmt_list RCP
   16              | LCP local_decls stmt_list . RCP
   19 stmt_list: stmt_list . stmt
   21 stmt: . expr_stmt
   22     | . compound_stmt
   23     | . selection_stmt
   24     | . iteration_stmt
   25     | . return_stmt
   26 expr_stmt: . simple_expr SEMI
   27          | . SEMI
   28 selection_stmt: . IF LP expr RP stmt
   29               | . IF LP expr RP stmt ELSE stmt
   30 iteration_stmt: . WHILE LP expr RP stmt
   31 return_stmt: . RETURN SEMI
   32            | . RETURN INTEGER SEMI
   33            | . RETURN FLOAT SEMI
   34            | . RETURN expr SEMI
   41 var: . IDENTIFIER
   42 simple_expr: . additive_expr relop additive_expr
   43            | . additive_expr
   50 additive_expr: . additive_expr addop term
   51              | . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 39
    LCP         shift, and go to state 34
    RCP         shift, and go to state 40
    SEMI        shift, and go to state 41
    IF          shift, and go to state 42
    WHILE       shift, and go to state 43
    RETURN      shift, and go to state 44
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    compound_stmt   go to state 48
    stmt            go to state 49
    expr_stmt       go to state 50
    selection_stmt  go to state 51
    iteration_stmt  go to state 52
    return_stmt     go to state 53
    var             go to state 54
    simple_expr     go to state 55
    additive_expr   go to state 56
    term            go to state 57
    factor          go to state 58
    call            go to state 59


State 39

   41 var: . IDENTIFIER
   42 simple_expr: . additive_expr relop additive_expr
   43            | . additive_expr
   50 additive_expr: . additive_expr addop term
   51              | . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   59       | LP . simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 39
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    var            go to state 54
    simple_expr    go to state 60
    additive_expr  go to state 56
    term           go to state 57
    factor         go to state 58
    call           go to state 59


State 40

   16 compound_stmt: LCP local_decls stmt_list RCP .

    $default  reduce using rule 16 (compound_stmt)


State 41

   27 expr_stmt: SEMI .

    $default  reduce using rule 27 (expr_stmt)


State 42

   28 selection_stmt: IF . LP expr RP stmt
   29               | IF . LP expr RP stmt ELSE stmt

    LP  shift, and go to state 61


State 43

   30 iteration_stmt: WHILE . LP expr RP stmt

    LP  shift, and go to state 62


State 44

   31 return_stmt: RETURN . SEMI
   32            | RETURN . INTEGER SEMI
   33            | RETURN . FLOAT SEMI
   34            | RETURN . expr SEMI
   35 expr: . var_list ASSIGN expr_list
   38 var_list: . var COMMA var_list
   39         | . var
   40         | . UNDERSCORE
   41 var: . IDENTIFIER

    UNDERSCORE  shift, and go to state 63
    SEMI        shift, and go to state 64
    INTEGER     shift, and go to state 65
    IDENTIFIER  shift, and go to state 66
    FLOAT       shift, and go to state 67

    expr      go to state 68
    var_list  go to state 69
    var       go to state 70


State 45

   63 factor: INTEGER .

    $default  reduce using rule 63 (factor)


State 46

   41 var: IDENTIFIER .  [RP, COMMA, MUL, DIV, PLUS, MINUS, MOD, GE, GT, LE, LT, EQUAL, UNEQUAL, SEMI]
   64 call: IDENTIFIER . LP args RP

    LP  shift, and go to state 71

    $default  reduce using rule 41 (var)


State 47

   62 factor: FLOAT .

    $default  reduce using rule 62 (factor)


State 48

   22 stmt: compound_stmt .

    $default  reduce using rule 22 (stmt)


State 49

   19 stmt_list: stmt_list stmt .

    $default  reduce using rule 19 (stmt_list)


State 50

   21 stmt: expr_stmt .

    $default  reduce using rule 21 (stmt)


State 51

   23 stmt: selection_stmt .

    $default  reduce using rule 23 (stmt)


State 52

   24 stmt: iteration_stmt .

    $default  reduce using rule 24 (stmt)


State 53

   25 stmt: return_stmt .

    $default  reduce using rule 25 (stmt)


State 54

   60 factor: var .

    $default  reduce using rule 60 (factor)


State 55

   26 expr_stmt: simple_expr . SEMI

    SEMI  shift, and go to state 72


State 56

   42 simple_expr: additive_expr . relop additive_expr
   43            | additive_expr .  [RP, COMMA, SEMI]
   44 relop: . LE
   45      | . LT
   46      | . GT
   47      | . GE
   48      | . EQUAL
   49      | . UNEQUAL
   50 additive_expr: additive_expr . addop term
   52 addop: . PLUS
   53      | . MINUS

    PLUS     shift, and go to state 73
    MINUS    shift, and go to state 74
    GE       shift, and go to state 75
    GT       shift, and go to state 76
    LE       shift, and go to state 77
    LT       shift, and go to state 78
    EQUAL    shift, and go to state 79
    UNEQUAL  shift, and go to state 80

    $default  reduce using rule 43 (simple_expr)

    relop  go to state 81
    addop  go to state 82


State 57

   51 additive_expr: term .  [RP, COMMA, PLUS, MINUS, GE, GT, LE, LT, EQUAL, UNEQUAL, SEMI]
   54 term: term . mulop factor
   56 mulop: . MUL
   57      | . DIV
   58      | . MOD

    MUL  shift, and go to state 83
    DIV  shift, and go to state 84
    MOD  shift, and go to state 85

    $default  reduce using rule 51 (additive_expr)

    mulop  go to state 86


State 58

   55 term: factor .

    $default  reduce using rule 55 (term)


State 59

   61 factor: call .

    $default  reduce using rule 61 (factor)


State 60

   59 factor: LP simple_expr . RP

    RP  shift, and go to state 87


State 61

   28 selection_stmt: IF LP . expr RP stmt
   29               | IF LP . expr RP stmt ELSE stmt
   35 expr: . var_list ASSIGN expr_list
   38 var_list: . var COMMA var_list
   39         | . var
   40         | . UNDERSCORE
   41 var: . IDENTIFIER

    UNDERSCORE  shift, and go to state 63
    IDENTIFIER  shift, and go to state 66

    expr      go to state 88
    var_list  go to state 69
    var       go to state 70


State 62

   30 iteration_stmt: WHILE LP . expr RP stmt
   35 expr: . var_list ASSIGN expr_list
   38 var_list: . var COMMA var_list
   39         | . var
   40         | . UNDERSCORE
   41 var: . IDENTIFIER

    UNDERSCORE  shift, and go to state 63
    IDENTIFIER  shift, and go to state 66

    expr      go to state 89
    var_list  go to state 69
    var       go to state 70


State 63

   40 var_list: UNDERSCORE .

    $default  reduce using rule 40 (var_list)


State 64

   31 return_stmt: RETURN SEMI .

    $default  reduce using rule 31 (return_stmt)


State 65

   32 return_stmt: RETURN INTEGER . SEMI

    SEMI  shift, and go to state 90


State 66

   41 var: IDENTIFIER .

    $default  reduce using rule 41 (var)


State 67

   33 return_stmt: RETURN FLOAT . SEMI

    SEMI  shift, and go to state 91


State 68

   34 return_stmt: RETURN expr . SEMI

    SEMI  shift, and go to state 92


State 69

   35 expr: var_list . ASSIGN expr_list

    ASSIGN  shift, and go to state 93


State 70

   38 var_list: var . COMMA var_list
   39         | var .  [ASSIGN]

    COMMA  shift, and go to state 94

    $default  reduce using rule 39 (var_list)


State 71

   41 var: . IDENTIFIER
   42 simple_expr: . additive_expr relop additive_expr
   43            | . additive_expr
   50 additive_expr: . additive_expr addop term
   51              | . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP
   64     | IDENTIFIER LP . args RP
   65 args: . arg_list
   66     | . %empty  [RP]
   67 arg_list: . arg_list COMMA simple_expr
   68         | . simple_expr

    LP          shift, and go to state 39
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    $default  reduce using rule 66 (args)

    var            go to state 54
    simple_expr    go to state 95
    additive_expr  go to state 56
    term           go to state 57
    factor         go to state 58
    call           go to state 59
    args           go to state 96
    arg_list       go to state 97


State 72

   26 expr_stmt: simple_expr SEMI .

    $default  reduce using rule 26 (expr_stmt)


State 73

   52 addop: PLUS .

    $default  reduce using rule 52 (addop)


State 74

   53 addop: MINUS .

    $default  reduce using rule 53 (addop)


State 75

   47 relop: GE .

    $default  reduce using rule 47 (relop)


State 76

   46 relop: GT .

    $default  reduce using rule 46 (relop)


State 77

   44 relop: LE .

    $default  reduce using rule 44 (relop)


State 78

   45 relop: LT .

    $default  reduce using rule 45 (relop)


State 79

   48 relop: EQUAL .

    $default  reduce using rule 48 (relop)


State 80

   49 relop: UNEQUAL .

    $default  reduce using rule 49 (relop)


State 81

   41 var: . IDENTIFIER
   42 simple_expr: additive_expr relop . additive_expr
   50 additive_expr: . additive_expr addop term
   51              | . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 39
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    var            go to state 54
    additive_expr  go to state 98
    term           go to state 57
    factor         go to state 58
    call           go to state 59


State 82

   41 var: . IDENTIFIER
   50 additive_expr: additive_expr addop . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 39
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    var     go to state 54
    term    go to state 99
    factor  go to state 58
    call    go to state 59


State 83

   56 mulop: MUL .

    $default  reduce using rule 56 (mulop)


State 84

   57 mulop: DIV .

    $default  reduce using rule 57 (mulop)


State 85

   58 mulop: MOD .

    $default  reduce using rule 58 (mulop)


State 86

   41 var: . IDENTIFIER
   54 term: term mulop . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 39
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    var     go to state 54
    factor  go to state 100
    call    go to state 59


State 87

   59 factor: LP simple_expr RP .

    $default  reduce using rule 59 (factor)


State 88

   28 selection_stmt: IF LP expr . RP stmt
   29               | IF LP expr . RP stmt ELSE stmt

    RP  shift, and go to state 101


State 89

   30 iteration_stmt: WHILE LP expr . RP stmt

    RP  shift, and go to state 102


State 90

   32 return_stmt: RETURN INTEGER SEMI .

    $default  reduce using rule 32 (return_stmt)


State 91

   33 return_stmt: RETURN FLOAT SEMI .

    $default  reduce using rule 33 (return_stmt)


State 92

   34 return_stmt: RETURN expr SEMI .

    $default  reduce using rule 34 (return_stmt)


State 93

   35 expr: var_list ASSIGN . expr_list
   36 expr_list: . expr_list COMMA simple_expr
   37          | . simple_expr
   41 var: . IDENTIFIER
   42 simple_expr: . additive_expr relop additive_expr
   43            | . additive_expr
   50 additive_expr: . additive_expr addop term
   51              | . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 39
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    expr_list      go to state 103
    var            go to state 54
    simple_expr    go to state 104
    additive_expr  go to state 56
    term           go to state 57
    factor         go to state 58
    call           go to state 59


State 94

   38 var_list: . var COMMA var_list
   38         | var COMMA . var_list
   39         | . var
   40         | . UNDERSCORE
   41 var: . IDENTIFIER

    UNDERSCORE  shift, and go to state 63
    IDENTIFIER  shift, and go to state 66

    var_list  go to state 105
    var       go to state 70


State 95

   68 arg_list: simple_expr .

    $default  reduce using rule 68 (arg_list)


State 96

   64 call: IDENTIFIER LP args . RP

    RP  shift, and go to state 106


State 97

   65 args: arg_list .  [RP]
   67 arg_list: arg_list . COMMA simple_expr

    COMMA  shift, and go to state 107

    $default  reduce using rule 65 (args)


State 98

   42 simple_expr: additive_expr relop additive_expr .  [RP, COMMA, SEMI]
   50 additive_expr: additive_expr . addop term
   52 addop: . PLUS
   53      | . MINUS

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74

    $default  reduce using rule 42 (simple_expr)

    addop  go to state 82


State 99

   50 additive_expr: additive_expr addop term .  [RP, COMMA, PLUS, MINUS, GE, GT, LE, LT, EQUAL, UNEQUAL, SEMI]
   54 term: term . mulop factor
   56 mulop: . MUL
   57      | . DIV
   58      | . MOD

    MUL  shift, and go to state 83
    DIV  shift, and go to state 84
    MOD  shift, and go to state 85

    $default  reduce using rule 50 (additive_expr)

    mulop  go to state 86


State 100

   54 term: term mulop factor .

    $default  reduce using rule 54 (term)


State 101

   16 compound_stmt: . LCP local_decls stmt_list RCP
   21 stmt: . expr_stmt
   22     | . compound_stmt
   23     | . selection_stmt
   24     | . iteration_stmt
   25     | . return_stmt
   26 expr_stmt: . simple_expr SEMI
   27          | . SEMI
   28 selection_stmt: . IF LP expr RP stmt
   28               | IF LP expr RP . stmt
   29               | . IF LP expr RP stmt ELSE stmt
   29               | IF LP expr RP . stmt ELSE stmt
   30 iteration_stmt: . WHILE LP expr RP stmt
   31 return_stmt: . RETURN SEMI
   32            | . RETURN INTEGER SEMI
   33            | . RETURN FLOAT SEMI
   34            | . RETURN expr SEMI
   41 var: . IDENTIFIER
   42 simple_expr: . additive_expr relop additive_expr
   43            | . additive_expr
   50 additive_expr: . additive_expr addop term
   51              | . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 39
    LCP         shift, and go to state 34
    SEMI        shift, and go to state 41
    IF          shift, and go to state 42
    WHILE       shift, and go to state 43
    RETURN      shift, and go to state 44
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    compound_stmt   go to state 48
    stmt            go to state 108
    expr_stmt       go to state 50
    selection_stmt  go to state 51
    iteration_stmt  go to state 52
    return_stmt     go to state 53
    var             go to state 54
    simple_expr     go to state 55
    additive_expr   go to state 56
    term            go to state 57
    factor          go to state 58
    call            go to state 59


State 102

   16 compound_stmt: . LCP local_decls stmt_list RCP
   21 stmt: . expr_stmt
   22     | . compound_stmt
   23     | . selection_stmt
   24     | . iteration_stmt
   25     | . return_stmt
   26 expr_stmt: . simple_expr SEMI
   27          | . SEMI
   28 selection_stmt: . IF LP expr RP stmt
   29               | . IF LP expr RP stmt ELSE stmt
   30 iteration_stmt: . WHILE LP expr RP stmt
   30               | WHILE LP expr RP . stmt
   31 return_stmt: . RETURN SEMI
   32            | . RETURN INTEGER SEMI
   33            | . RETURN FLOAT SEMI
   34            | . RETURN expr SEMI
   41 var: . IDENTIFIER
   42 simple_expr: . additive_expr relop additive_expr
   43            | . additive_expr
   50 additive_expr: . additive_expr addop term
   51              | . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 39
    LCP         shift, and go to state 34
    SEMI        shift, and go to state 41
    IF          shift, and go to state 42
    WHILE       shift, and go to state 43
    RETURN      shift, and go to state 44
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    compound_stmt   go to state 48
    stmt            go to state 109
    expr_stmt       go to state 50
    selection_stmt  go to state 51
    iteration_stmt  go to state 52
    return_stmt     go to state 53
    var             go to state 54
    simple_expr     go to state 55
    additive_expr   go to state 56
    term            go to state 57
    factor          go to state 58
    call            go to state 59


State 103

   35 expr: var_list ASSIGN expr_list .  [RP, SEMI]
   36 expr_list: expr_list . COMMA simple_expr

    COMMA  shift, and go to state 110

    $default  reduce using rule 35 (expr)


State 104

   37 expr_list: simple_expr .

    $default  reduce using rule 37 (expr_list)


State 105

   38 var_list: var COMMA var_list .

    $default  reduce using rule 38 (var_list)


State 106

   64 call: IDENTIFIER LP args RP .

    $default  reduce using rule 64 (call)


State 107

   41 var: . IDENTIFIER
   42 simple_expr: . additive_expr relop additive_expr
   43            | . additive_expr
   50 additive_expr: . additive_expr addop term
   51              | . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP
   67 arg_list: arg_list COMMA . simple_expr

    LP          shift, and go to state 39
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    var            go to state 54
    simple_expr    go to state 111
    additive_expr  go to state 56
    term           go to state 57
    factor         go to state 58
    call           go to state 59


State 108

   28 selection_stmt: IF LP expr RP stmt .  [LP, LCP, RCP, SEMI, IF, WHILE, RETURN, INTEGER, IDENTIFIER, FLOAT]
   29               | IF LP expr RP stmt . ELSE stmt

    ELSE  shift, and go to state 112

    $default  reduce using rule 28 (selection_stmt)

    Conflict between rule 28 and token ELSE resolved as shift (LOWER_THAN_ELSE < ELSE).


State 109

   30 iteration_stmt: WHILE LP expr RP stmt .

    $default  reduce using rule 30 (iteration_stmt)


State 110

   36 expr_list: expr_list COMMA . simple_expr
   41 var: . IDENTIFIER
   42 simple_expr: . additive_expr relop additive_expr
   43            | . additive_expr
   50 additive_expr: . additive_expr addop term
   51              | . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 39
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    var            go to state 54
    simple_expr    go to state 113
    additive_expr  go to state 56
    term           go to state 57
    factor         go to state 58
    call           go to state 59


State 111

   67 arg_list: arg_list COMMA simple_expr .

    $default  reduce using rule 67 (arg_list)


State 112

   16 compound_stmt: . LCP local_decls stmt_list RCP
   21 stmt: . expr_stmt
   22     | . compound_stmt
   23     | . selection_stmt
   24     | . iteration_stmt
   25     | . return_stmt
   26 expr_stmt: . simple_expr SEMI
   27          | . SEMI
   28 selection_stmt: . IF LP expr RP stmt
   29               | . IF LP expr RP stmt ELSE stmt
   29               | IF LP expr RP stmt ELSE . stmt
   30 iteration_stmt: . WHILE LP expr RP stmt
   31 return_stmt: . RETURN SEMI
   32            | . RETURN INTEGER SEMI
   33            | . RETURN FLOAT SEMI
   34            | . RETURN expr SEMI
   41 var: . IDENTIFIER
   42 simple_expr: . additive_expr relop additive_expr
   43            | . additive_expr
   50 additive_expr: . additive_expr addop term
   51              | . term
   54 term: . term mulop factor
   55     | . factor
   59 factor: . LP simple_expr RP
   60       | . var
   61       | . call
   62       | . FLOAT
   63       | . INTEGER
   64 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 39
    LCP         shift, and go to state 34
    SEMI        shift, and go to state 41
    IF          shift, and go to state 42
    WHILE       shift, and go to state 43
    RETURN      shift, and go to state 44
    INTEGER     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46
    FLOAT       shift, and go to state 47

    compound_stmt   go to state 48
    stmt            go to state 114
    expr_stmt       go to state 50
    selection_stmt  go to state 51
    iteration_stmt  go to state 52
    return_stmt     go to state 53
    var             go to state 54
    simple_expr     go to state 55
    additive_expr   go to state 56
    term            go to state 57
    factor          go to state 58
    call            go to state 59


State 113

   36 expr_list: expr_list COMMA simple_expr .

    $default  reduce using rule 36 (expr_list)


State 114

   29 selection_stmt: IF LP expr RP stmt ELSE stmt .

    $default  reduce using rule 29 (selection_stmt)

Terminals unused in grammar

    DOT
    COLON
    AND
    OR
    NOT
    FOR


Grammar

    0 $accept: program $end

    1 program: decl_list

    2 decl_list: decl_list decl
    3          | decl

    4 decl: var_decl
    5     | fun_decl

    6 var_decl: type_specifier IDENTIFIER SEMI
    7         | type_specifier IDENTIFIER LB INTEGER RB SEMI

    8 type_specifier: SYS_TYPE

    9 fun_decl: FUNC IDENTIFIER LP params RP LP params RP compound_stmt

   10 params: param_list
   11       | VOID

   12 param_list: param_list COMMA param
   13           | param

   14 param: IDENTIFIER type_specifier
   15      | IDENTIFIER LB RB type_specifier

   16 compound_stmt: LCP local_decls stmt_list RCP

   17 local_decls: local_decls var_decl
   18            | %empty

   19 stmt_list: stmt_list stmt
   20          | %empty

   21 stmt: expr_stmt
   22     | compound_stmt
   23     | selection_stmt
   24     | iteration_stmt
   25     | return_stmt
   26     | function_stmt

   27 expr_stmt: expr SEMI
   28          | SEMI

   29 selection_stmt: IF LP simple_expr RP stmt
   30               | IF LP simple_expr RP stmt ELSE stmt

   31 iteration_stmt: WHILE LP simple_expr RP stmt

   32 return_stmt: RETURN INTEGER SEMI
   33            | RETURN FLOAT SEMI
   34            | RETURN expr_stmt

   35 function_stmt: call SEMI

   36 expr: var_list ASSIGN expr_list

   37 expr_list: expr_list COMMA simple_expr
   38          | simple_expr

   39 var_list: var_list COMMA var
   40         | var
   41         | UNDERSCORE

   42 var: IDENTIFIER
   43    | IDENTIFIER LB simple_expr RB

   44 simple_expr: additive_expr relop additive_expr
   45            | additive_expr

   46 relop: LE
   47      | LT
   48      | GT
   49      | GE
   50      | EQUAL
   51      | UNEQUAL

   52 additive_expr: additive_expr addop term
   53              | term

   54 addop: PLUS
   55      | MINUS

   56 term: term mulop factor
   57     | factor

   58 mulop: MUL
   59      | DIV
   60      | MOD

   61 factor: LP simple_expr RP
   62       | var
   63       | call
   64       | FLOAT
   65       | INTEGER

   66 call: IDENTIFIER LP args RP

   67 args: arg_list
   68     | %empty

   69 arg_list: arg_list COMMA simple_expr
   70         | simple_expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    LP (258) 9 29 30 31 61 66
    RP (259) 9 29 30 31 61 66
    LB (260) 7 15 43
    RB (261) 7 15 43
    LCP (262) 16
    RCP (263) 16
    DOT (264)
    COMMA (265) 12 37 39 69
    COLON (266)
    UNDERSCORE (267) 41
    MUL (268) 58
    DIV (269) 59
    PLUS (270) 54
    MINUS (271) 55
    MOD (272) 60
    GE (273) 49
    GT (274) 48
    LE (275) 46
    LT (276) 47
    EQUAL (277) 50
    UNEQUAL (278) 51
    ASSIGN (279) 36
    SEMI (280) 6 7 27 28 32 33 35
    AND (281)
    OR (282)
    NOT (283)
    IF (284) 29 30
    ELSE (285) 30
    WHILE (286) 31
    FOR (287)
    FUNC (288) 9
    RETURN (289) 32 33 34
    INTEGER <iVal> (290) 7 32 65
    IDENTIFIER <sVal> (291) 6 7 9 14 15 42 43 66
    SYS_TYPE <sVal> (292) 8
    VOID <sVal> (293) 11
    FLOAT <fVal> (294) 33 64
    LOWER_THAN_ELSE (295)


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    program <sVal> (42)
        on left: 1
        on right: 0
    decl_list <sVal> (43)
        on left: 2 3
        on right: 1 2
    decl <sVal> (44)
        on left: 4 5
        on right: 2 3
    var_decl <sVal> (45)
        on left: 6 7
        on right: 4 17
    type_specifier <sVal> (46)
        on left: 8
        on right: 6 7 14 15
    fun_decl <sVal> (47)
        on left: 9
        on right: 5
    params <sVal> (48)
        on left: 10 11
        on right: 9
    param_list <sVal> (49)
        on left: 12 13
        on right: 10 12
    param (50)
        on left: 14 15
        on right: 12 13
    compound_stmt <sVal> (51)
        on left: 16
        on right: 9 22
    local_decls <sVal> (52)
        on left: 17 18
        on right: 16 17
    stmt_list <sVal> (53)
        on left: 19 20
        on right: 16 19
    stmt <sVal> (54)
        on left: 21 22 23 24 25 26
        on right: 19 29 30 31
    expr_stmt <sVal> (55)
        on left: 27 28
        on right: 21 34
    selection_stmt <sVal> (56)
        on left: 29 30
        on right: 23
    iteration_stmt <sVal> (57)
        on left: 31
        on right: 24
    return_stmt <sVal> (58)
        on left: 32 33 34
        on right: 25
    function_stmt (59)
        on left: 35
        on right: 26
    expr <sVal> (60)
        on left: 36
        on right: 27
    expr_list (61)
        on left: 37 38
        on right: 36 37
    var_list <sVal> (62)
        on left: 39 40 41
        on right: 36 39
    var <sVal> (63)
        on left: 42 43
        on right: 39 40 62
    simple_expr <sVal> (64)
        on left: 44 45
        on right: 29 30 31 37 38 43 61 69 70
    relop (65)
        on left: 46 47 48 49 50 51
        on right: 44
    additive_expr <sVal> (66)
        on left: 52 53
        on right: 44 45 52
    addop (67)
        on left: 54 55
        on right: 52
    term <sVal> (68)
        on left: 56 57
        on right: 52 53 56
    mulop (69)
        on left: 58 59 60
        on right: 56
    factor <sVal> (70)
        on left: 61 62 63 64 65
        on right: 56 57
    call (71)
        on left: 66
        on right: 35 63
    args <sVal> (72)
        on left: 67 68
        on right: 66
    arg_list <sVal> (73)
        on left: 69 70
        on right: 67 69


State 0

    0 $accept: . program $end
    1 program: . decl_list
    2 decl_list: . decl_list decl
    3          | . decl
    4 decl: . var_decl
    5     | . fun_decl
    6 var_decl: . type_specifier IDENTIFIER SEMI
    7         | . type_specifier IDENTIFIER LB INTEGER RB SEMI
    8 type_specifier: . SYS_TYPE
    9 fun_decl: . FUNC IDENTIFIER LP params RP LP params RP compound_stmt

    FUNC      shift, and go to state 1
    SYS_TYPE  shift, and go to state 2

    program         go to state 3
    decl_list       go to state 4
    decl            go to state 5
    var_decl        go to state 6
    type_specifier  go to state 7
    fun_decl        go to state 8


State 1

    9 fun_decl: FUNC . IDENTIFIER LP params RP LP params RP compound_stmt

    IDENTIFIER  shift, and go to state 9


State 2

    8 type_specifier: SYS_TYPE .

    $default  reduce using rule 8 (type_specifier)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 10


State 4

    1 program: decl_list .  [$end]
    2 decl_list: decl_list . decl
    4 decl: . var_decl
    5     | . fun_decl
    6 var_decl: . type_specifier IDENTIFIER SEMI
    7         | . type_specifier IDENTIFIER LB INTEGER RB SEMI
    8 type_specifier: . SYS_TYPE
    9 fun_decl: . FUNC IDENTIFIER LP params RP LP params RP compound_stmt

    FUNC      shift, and go to state 1
    SYS_TYPE  shift, and go to state 2

    $default  reduce using rule 1 (program)

    decl            go to state 11
    var_decl        go to state 6
    type_specifier  go to state 7
    fun_decl        go to state 8


State 5

    3 decl_list: decl .

    $default  reduce using rule 3 (decl_list)


State 6

    4 decl: var_decl .

    $default  reduce using rule 4 (decl)


State 7

    6 var_decl: type_specifier . IDENTIFIER SEMI
    7         | type_specifier . IDENTIFIER LB INTEGER RB SEMI

    IDENTIFIER  shift, and go to state 12


State 8

    5 decl: fun_decl .

    $default  reduce using rule 5 (decl)


State 9

    9 fun_decl: FUNC IDENTIFIER . LP params RP LP params RP compound_stmt

    LP  shift, and go to state 13


State 10

    0 $accept: program $end .

    $default  accept


State 11

    2 decl_list: decl_list decl .

    $default  reduce using rule 2 (decl_list)


State 12

    6 var_decl: type_specifier IDENTIFIER . SEMI
    7         | type_specifier IDENTIFIER . LB INTEGER RB SEMI

    LB    shift, and go to state 14
    SEMI  shift, and go to state 15


State 13

    9 fun_decl: FUNC IDENTIFIER LP . params RP LP params RP compound_stmt
   10 params: . param_list
   11       | . VOID
   12 param_list: . param_list COMMA param
   13           | . param
   14 param: . IDENTIFIER type_specifier
   15      | . IDENTIFIER LB RB type_specifier

    IDENTIFIER  shift, and go to state 16
    VOID        shift, and go to state 17

    params      go to state 18
    param_list  go to state 19
    param       go to state 20


State 14

    7 var_decl: type_specifier IDENTIFIER LB . INTEGER RB SEMI

    INTEGER  shift, and go to state 21


State 15

    6 var_decl: type_specifier IDENTIFIER SEMI .

    $default  reduce using rule 6 (var_decl)


State 16

    8 type_specifier: . SYS_TYPE
   14 param: IDENTIFIER . type_specifier
   15      | IDENTIFIER . LB RB type_specifier

    LB        shift, and go to state 22
    SYS_TYPE  shift, and go to state 2

    type_specifier  go to state 23


State 17

   11 params: VOID .

    $default  reduce using rule 11 (params)


State 18

    9 fun_decl: FUNC IDENTIFIER LP params . RP LP params RP compound_stmt

    RP  shift, and go to state 24


State 19

   10 params: param_list .  [RP]
   12 param_list: param_list . COMMA param

    COMMA  shift, and go to state 25

    $default  reduce using rule 10 (params)


State 20

   13 param_list: param .

    $default  reduce using rule 13 (param_list)


State 21

    7 var_decl: type_specifier IDENTIFIER LB INTEGER . RB SEMI

    RB  shift, and go to state 26


State 22

   15 param: IDENTIFIER LB . RB type_specifier

    RB  shift, and go to state 27


State 23

   14 param: IDENTIFIER type_specifier .

    $default  reduce using rule 14 (param)


State 24

    9 fun_decl: FUNC IDENTIFIER LP params RP . LP params RP compound_stmt

    LP  shift, and go to state 28


State 25

   12 param_list: param_list COMMA . param
   14 param: . IDENTIFIER type_specifier
   15      | . IDENTIFIER LB RB type_specifier

    IDENTIFIER  shift, and go to state 16

    param  go to state 29


State 26

    7 var_decl: type_specifier IDENTIFIER LB INTEGER RB . SEMI

    SEMI  shift, and go to state 30


State 27

    8 type_specifier: . SYS_TYPE
   15 param: IDENTIFIER LB RB . type_specifier

    SYS_TYPE  shift, and go to state 2

    type_specifier  go to state 31


State 28

    9 fun_decl: FUNC IDENTIFIER LP params RP LP . params RP compound_stmt
   10 params: . param_list
   11       | . VOID
   12 param_list: . param_list COMMA param
   13           | . param
   14 param: . IDENTIFIER type_specifier
   15      | . IDENTIFIER LB RB type_specifier

    IDENTIFIER  shift, and go to state 16
    VOID        shift, and go to state 17

    params      go to state 32
    param_list  go to state 19
    param       go to state 20


State 29

   12 param_list: param_list COMMA param .

    $default  reduce using rule 12 (param_list)


State 30

    7 var_decl: type_specifier IDENTIFIER LB INTEGER RB SEMI .

    $default  reduce using rule 7 (var_decl)


State 31

   15 param: IDENTIFIER LB RB type_specifier .

    $default  reduce using rule 15 (param)


State 32

    9 fun_decl: FUNC IDENTIFIER LP params RP LP params . RP compound_stmt

    RP  shift, and go to state 33


State 33

    9 fun_decl: FUNC IDENTIFIER LP params RP LP params RP . compound_stmt
   16 compound_stmt: . LCP local_decls stmt_list RCP

    LCP  shift, and go to state 34

    compound_stmt  go to state 35


State 34

   16 compound_stmt: LCP . local_decls stmt_list RCP
   17 local_decls: . local_decls var_decl
   18            | . %empty

    $default  reduce using rule 18 (local_decls)

    local_decls  go to state 36


State 35

    9 fun_decl: FUNC IDENTIFIER LP params RP LP params RP compound_stmt .

    $default  reduce using rule 9 (fun_decl)


State 36

    6 var_decl: . type_specifier IDENTIFIER SEMI
    7         | . type_specifier IDENTIFIER LB INTEGER RB SEMI
    8 type_specifier: . SYS_TYPE
   16 compound_stmt: LCP local_decls . stmt_list RCP
   17 local_decls: local_decls . var_decl
   19 stmt_list: . stmt_list stmt
   20          | . %empty  [LCP, RCP, UNDERSCORE, SEMI, IF, WHILE, RETURN, IDENTIFIER]

    SYS_TYPE  shift, and go to state 2

    $default  reduce using rule 20 (stmt_list)

    var_decl        go to state 37
    type_specifier  go to state 7
    stmt_list       go to state 38


State 37

   17 local_decls: local_decls var_decl .

    $default  reduce using rule 17 (local_decls)


State 38

   16 compound_stmt: . LCP local_decls stmt_list RCP
   16              | LCP local_decls stmt_list . RCP
   19 stmt_list: stmt_list . stmt
   21 stmt: . expr_stmt
   22     | . compound_stmt
   23     | . selection_stmt
   24     | . iteration_stmt
   25     | . return_stmt
   26     | . function_stmt
   27 expr_stmt: . expr SEMI
   28          | . SEMI
   29 selection_stmt: . IF LP simple_expr RP stmt
   30               | . IF LP simple_expr RP stmt ELSE stmt
   31 iteration_stmt: . WHILE LP simple_expr RP stmt
   32 return_stmt: . RETURN INTEGER SEMI
   33            | . RETURN FLOAT SEMI
   34            | . RETURN expr_stmt
   35 function_stmt: . call SEMI
   36 expr: . var_list ASSIGN expr_list
   39 var_list: . var_list COMMA var
   40         | . var
   41         | . UNDERSCORE
   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   66 call: . IDENTIFIER LP args RP

    LCP         shift, and go to state 34
    RCP         shift, and go to state 39
    UNDERSCORE  shift, and go to state 40
    SEMI        shift, and go to state 41
    IF          shift, and go to state 42
    WHILE       shift, and go to state 43
    RETURN      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    compound_stmt   go to state 46
    stmt            go to state 47
    expr_stmt       go to state 48
    selection_stmt  go to state 49
    iteration_stmt  go to state 50
    return_stmt     go to state 51
    function_stmt   go to state 52
    expr            go to state 53
    var_list        go to state 54
    var             go to state 55
    call            go to state 56


State 39

   16 compound_stmt: LCP local_decls stmt_list RCP .

    $default  reduce using rule 16 (compound_stmt)


State 40

   41 var_list: UNDERSCORE .

    $default  reduce using rule 41 (var_list)


State 41

   28 expr_stmt: SEMI .

    $default  reduce using rule 28 (expr_stmt)


State 42

   29 selection_stmt: IF . LP simple_expr RP stmt
   30               | IF . LP simple_expr RP stmt ELSE stmt

    LP  shift, and go to state 57


State 43

   31 iteration_stmt: WHILE . LP simple_expr RP stmt

    LP  shift, and go to state 58


State 44

   27 expr_stmt: . expr SEMI
   28          | . SEMI
   32 return_stmt: RETURN . INTEGER SEMI
   33            | RETURN . FLOAT SEMI
   34            | RETURN . expr_stmt
   36 expr: . var_list ASSIGN expr_list
   39 var_list: . var_list COMMA var
   40         | . var
   41         | . UNDERSCORE
   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB

    UNDERSCORE  shift, and go to state 40
    SEMI        shift, and go to state 41
    INTEGER     shift, and go to state 59
    IDENTIFIER  shift, and go to state 60
    FLOAT       shift, and go to state 61

    expr_stmt  go to state 62
    expr       go to state 53
    var_list   go to state 54
    var        go to state 55


State 45

   42 var: IDENTIFIER .  [RP, RB, COMMA, MUL, DIV, PLUS, MINUS, MOD, GE, GT, LE, LT, EQUAL, UNEQUAL, ASSIGN, SEMI]
   43    | IDENTIFIER . LB simple_expr RB
   66 call: IDENTIFIER . LP args RP

    LP  shift, and go to state 63
    LB  shift, and go to state 64

    $default  reduce using rule 42 (var)


State 46

   22 stmt: compound_stmt .

    $default  reduce using rule 22 (stmt)


State 47

   19 stmt_list: stmt_list stmt .

    $default  reduce using rule 19 (stmt_list)


State 48

   21 stmt: expr_stmt .

    $default  reduce using rule 21 (stmt)


State 49

   23 stmt: selection_stmt .

    $default  reduce using rule 23 (stmt)


State 50

   24 stmt: iteration_stmt .

    $default  reduce using rule 24 (stmt)


State 51

   25 stmt: return_stmt .

    $default  reduce using rule 25 (stmt)


State 52

   26 stmt: function_stmt .

    $default  reduce using rule 26 (stmt)


State 53

   27 expr_stmt: expr . SEMI

    SEMI  shift, and go to state 65


State 54

   36 expr: var_list . ASSIGN expr_list
   39 var_list: var_list . COMMA var

    COMMA   shift, and go to state 66
    ASSIGN  shift, and go to state 67


State 55

   40 var_list: var .

    $default  reduce using rule 40 (var_list)


State 56

   35 function_stmt: call . SEMI

    SEMI  shift, and go to state 68


State 57

   29 selection_stmt: IF LP . simple_expr RP stmt
   30               | IF LP . simple_expr RP stmt ELSE stmt
   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   44 simple_expr: . additive_expr relop additive_expr
   45            | . additive_expr
   52 additive_expr: . additive_expr addop term
   53              | . term
   56 term: . term mulop factor
   57     | . factor
   61 factor: . LP simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    var            go to state 72
    simple_expr    go to state 73
    additive_expr  go to state 74
    term           go to state 75
    factor         go to state 76
    call           go to state 77


State 58

   31 iteration_stmt: WHILE LP . simple_expr RP stmt
   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   44 simple_expr: . additive_expr relop additive_expr
   45            | . additive_expr
   52 additive_expr: . additive_expr addop term
   53              | . term
   56 term: . term mulop factor
   57     | . factor
   61 factor: . LP simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    var            go to state 72
    simple_expr    go to state 78
    additive_expr  go to state 74
    term           go to state 75
    factor         go to state 76
    call           go to state 77


State 59

   32 return_stmt: RETURN INTEGER . SEMI

    SEMI  shift, and go to state 79


State 60

   42 var: IDENTIFIER .  [COMMA, ASSIGN]
   43    | IDENTIFIER . LB simple_expr RB

    LB  shift, and go to state 64

    $default  reduce using rule 42 (var)


State 61

   33 return_stmt: RETURN FLOAT . SEMI

    SEMI  shift, and go to state 80


State 62

   34 return_stmt: RETURN expr_stmt .

    $default  reduce using rule 34 (return_stmt)


State 63

   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   44 simple_expr: . additive_expr relop additive_expr
   45            | . additive_expr
   52 additive_expr: . additive_expr addop term
   53              | . term
   56 term: . term mulop factor
   57     | . factor
   61 factor: . LP simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP
   66     | IDENTIFIER LP . args RP
   67 args: . arg_list
   68     | . %empty  [RP]
   69 arg_list: . arg_list COMMA simple_expr
   70         | . simple_expr

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    $default  reduce using rule 68 (args)

    var            go to state 72
    simple_expr    go to state 81
    additive_expr  go to state 74
    term           go to state 75
    factor         go to state 76
    call           go to state 77
    args           go to state 82
    arg_list       go to state 83


State 64

   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   43    | IDENTIFIER LB . simple_expr RB
   44 simple_expr: . additive_expr relop additive_expr
   45            | . additive_expr
   52 additive_expr: . additive_expr addop term
   53              | . term
   56 term: . term mulop factor
   57     | . factor
   61 factor: . LP simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    var            go to state 72
    simple_expr    go to state 84
    additive_expr  go to state 74
    term           go to state 75
    factor         go to state 76
    call           go to state 77


State 65

   27 expr_stmt: expr SEMI .

    $default  reduce using rule 27 (expr_stmt)


State 66

   39 var_list: var_list COMMA . var
   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB

    IDENTIFIER  shift, and go to state 60

    var  go to state 85


State 67

   36 expr: var_list ASSIGN . expr_list
   37 expr_list: . expr_list COMMA simple_expr
   38          | . simple_expr
   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   44 simple_expr: . additive_expr relop additive_expr
   45            | . additive_expr
   52 additive_expr: . additive_expr addop term
   53              | . term
   56 term: . term mulop factor
   57     | . factor
   61 factor: . LP simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    expr_list      go to state 86
    var            go to state 72
    simple_expr    go to state 87
    additive_expr  go to state 74
    term           go to state 75
    factor         go to state 76
    call           go to state 77


State 68

   35 function_stmt: call SEMI .

    $default  reduce using rule 35 (function_stmt)


State 69

   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   44 simple_expr: . additive_expr relop additive_expr
   45            | . additive_expr
   52 additive_expr: . additive_expr addop term
   53              | . term
   56 term: . term mulop factor
   57     | . factor
   61 factor: . LP simple_expr RP
   61       | LP . simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    var            go to state 72
    simple_expr    go to state 88
    additive_expr  go to state 74
    term           go to state 75
    factor         go to state 76
    call           go to state 77


State 70

   65 factor: INTEGER .

    $default  reduce using rule 65 (factor)


State 71

   64 factor: FLOAT .

    $default  reduce using rule 64 (factor)


State 72

   62 factor: var .

    $default  reduce using rule 62 (factor)


State 73

   29 selection_stmt: IF LP simple_expr . RP stmt
   30               | IF LP simple_expr . RP stmt ELSE stmt

    RP  shift, and go to state 89


State 74

   44 simple_expr: additive_expr . relop additive_expr
   45            | additive_expr .  [RP, RB, COMMA, SEMI]
   46 relop: . LE
   47      | . LT
   48      | . GT
   49      | . GE
   50      | . EQUAL
   51      | . UNEQUAL
   52 additive_expr: additive_expr . addop term
   54 addop: . PLUS
   55      | . MINUS

    PLUS     shift, and go to state 90
    MINUS    shift, and go to state 91
    GE       shift, and go to state 92
    GT       shift, and go to state 93
    LE       shift, and go to state 94
    LT       shift, and go to state 95
    EQUAL    shift, and go to state 96
    UNEQUAL  shift, and go to state 97

    $default  reduce using rule 45 (simple_expr)

    relop  go to state 98
    addop  go to state 99


State 75

   53 additive_expr: term .  [RP, RB, COMMA, PLUS, MINUS, GE, GT, LE, LT, EQUAL, UNEQUAL, SEMI]
   56 term: term . mulop factor
   58 mulop: . MUL
   59      | . DIV
   60      | . MOD

    MUL  shift, and go to state 100
    DIV  shift, and go to state 101
    MOD  shift, and go to state 102

    $default  reduce using rule 53 (additive_expr)

    mulop  go to state 103


State 76

   57 term: factor .

    $default  reduce using rule 57 (term)


State 77

   63 factor: call .

    $default  reduce using rule 63 (factor)


State 78

   31 iteration_stmt: WHILE LP simple_expr . RP stmt

    RP  shift, and go to state 104


State 79

   32 return_stmt: RETURN INTEGER SEMI .

    $default  reduce using rule 32 (return_stmt)


State 80

   33 return_stmt: RETURN FLOAT SEMI .

    $default  reduce using rule 33 (return_stmt)


State 81

   70 arg_list: simple_expr .

    $default  reduce using rule 70 (arg_list)


State 82

   66 call: IDENTIFIER LP args . RP

    RP  shift, and go to state 105


State 83

   67 args: arg_list .  [RP]
   69 arg_list: arg_list . COMMA simple_expr

    COMMA  shift, and go to state 106

    $default  reduce using rule 67 (args)


State 84

   43 var: IDENTIFIER LB simple_expr . RB

    RB  shift, and go to state 107


State 85

   39 var_list: var_list COMMA var .

    $default  reduce using rule 39 (var_list)


State 86

   36 expr: var_list ASSIGN expr_list .  [SEMI]
   37 expr_list: expr_list . COMMA simple_expr

    COMMA  shift, and go to state 108

    $default  reduce using rule 36 (expr)


State 87

   38 expr_list: simple_expr .

    $default  reduce using rule 38 (expr_list)


State 88

   61 factor: LP simple_expr . RP

    RP  shift, and go to state 109


State 89

   16 compound_stmt: . LCP local_decls stmt_list RCP
   21 stmt: . expr_stmt
   22     | . compound_stmt
   23     | . selection_stmt
   24     | . iteration_stmt
   25     | . return_stmt
   26     | . function_stmt
   27 expr_stmt: . expr SEMI
   28          | . SEMI
   29 selection_stmt: . IF LP simple_expr RP stmt
   29               | IF LP simple_expr RP . stmt
   30               | . IF LP simple_expr RP stmt ELSE stmt
   30               | IF LP simple_expr RP . stmt ELSE stmt
   31 iteration_stmt: . WHILE LP simple_expr RP stmt
   32 return_stmt: . RETURN INTEGER SEMI
   33            | . RETURN FLOAT SEMI
   34            | . RETURN expr_stmt
   35 function_stmt: . call SEMI
   36 expr: . var_list ASSIGN expr_list
   39 var_list: . var_list COMMA var
   40         | . var
   41         | . UNDERSCORE
   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   66 call: . IDENTIFIER LP args RP

    LCP         shift, and go to state 34
    UNDERSCORE  shift, and go to state 40
    SEMI        shift, and go to state 41
    IF          shift, and go to state 42
    WHILE       shift, and go to state 43
    RETURN      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    compound_stmt   go to state 46
    stmt            go to state 110
    expr_stmt       go to state 48
    selection_stmt  go to state 49
    iteration_stmt  go to state 50
    return_stmt     go to state 51
    function_stmt   go to state 52
    expr            go to state 53
    var_list        go to state 54
    var             go to state 55
    call            go to state 56


State 90

   54 addop: PLUS .

    $default  reduce using rule 54 (addop)


State 91

   55 addop: MINUS .

    $default  reduce using rule 55 (addop)


State 92

   49 relop: GE .

    $default  reduce using rule 49 (relop)


State 93

   48 relop: GT .

    $default  reduce using rule 48 (relop)


State 94

   46 relop: LE .

    $default  reduce using rule 46 (relop)


State 95

   47 relop: LT .

    $default  reduce using rule 47 (relop)


State 96

   50 relop: EQUAL .

    $default  reduce using rule 50 (relop)


State 97

   51 relop: UNEQUAL .

    $default  reduce using rule 51 (relop)


State 98

   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   44 simple_expr: additive_expr relop . additive_expr
   52 additive_expr: . additive_expr addop term
   53              | . term
   56 term: . term mulop factor
   57     | . factor
   61 factor: . LP simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    var            go to state 72
    additive_expr  go to state 111
    term           go to state 75
    factor         go to state 76
    call           go to state 77


State 99

   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   52 additive_expr: additive_expr addop . term
   56 term: . term mulop factor
   57     | . factor
   61 factor: . LP simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    var     go to state 72
    term    go to state 112
    factor  go to state 76
    call    go to state 77


State 100

   58 mulop: MUL .

    $default  reduce using rule 58 (mulop)


State 101

   59 mulop: DIV .

    $default  reduce using rule 59 (mulop)


State 102

   60 mulop: MOD .

    $default  reduce using rule 60 (mulop)


State 103

   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   56 term: term mulop . factor
   61 factor: . LP simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    var     go to state 72
    factor  go to state 113
    call    go to state 77


State 104

   16 compound_stmt: . LCP local_decls stmt_list RCP
   21 stmt: . expr_stmt
   22     | . compound_stmt
   23     | . selection_stmt
   24     | . iteration_stmt
   25     | . return_stmt
   26     | . function_stmt
   27 expr_stmt: . expr SEMI
   28          | . SEMI
   29 selection_stmt: . IF LP simple_expr RP stmt
   30               | . IF LP simple_expr RP stmt ELSE stmt
   31 iteration_stmt: . WHILE LP simple_expr RP stmt
   31               | WHILE LP simple_expr RP . stmt
   32 return_stmt: . RETURN INTEGER SEMI
   33            | . RETURN FLOAT SEMI
   34            | . RETURN expr_stmt
   35 function_stmt: . call SEMI
   36 expr: . var_list ASSIGN expr_list
   39 var_list: . var_list COMMA var
   40         | . var
   41         | . UNDERSCORE
   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   66 call: . IDENTIFIER LP args RP

    LCP         shift, and go to state 34
    UNDERSCORE  shift, and go to state 40
    SEMI        shift, and go to state 41
    IF          shift, and go to state 42
    WHILE       shift, and go to state 43
    RETURN      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    compound_stmt   go to state 46
    stmt            go to state 114
    expr_stmt       go to state 48
    selection_stmt  go to state 49
    iteration_stmt  go to state 50
    return_stmt     go to state 51
    function_stmt   go to state 52
    expr            go to state 53
    var_list        go to state 54
    var             go to state 55
    call            go to state 56


State 105

   66 call: IDENTIFIER LP args RP .

    $default  reduce using rule 66 (call)


State 106

   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   44 simple_expr: . additive_expr relop additive_expr
   45            | . additive_expr
   52 additive_expr: . additive_expr addop term
   53              | . term
   56 term: . term mulop factor
   57     | . factor
   61 factor: . LP simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP
   69 arg_list: arg_list COMMA . simple_expr

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    var            go to state 72
    simple_expr    go to state 115
    additive_expr  go to state 74
    term           go to state 75
    factor         go to state 76
    call           go to state 77


State 107

   43 var: IDENTIFIER LB simple_expr RB .

    $default  reduce using rule 43 (var)


State 108

   37 expr_list: expr_list COMMA . simple_expr
   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   44 simple_expr: . additive_expr relop additive_expr
   45            | . additive_expr
   52 additive_expr: . additive_expr addop term
   53              | . term
   56 term: . term mulop factor
   57     | . factor
   61 factor: . LP simple_expr RP
   62       | . var
   63       | . call
   64       | . FLOAT
   65       | . INTEGER
   66 call: . IDENTIFIER LP args RP

    LP          shift, and go to state 69
    INTEGER     shift, and go to state 70
    IDENTIFIER  shift, and go to state 45
    FLOAT       shift, and go to state 71

    var            go to state 72
    simple_expr    go to state 116
    additive_expr  go to state 74
    term           go to state 75
    factor         go to state 76
    call           go to state 77


State 109

   61 factor: LP simple_expr RP .

    $default  reduce using rule 61 (factor)


State 110

   29 selection_stmt: IF LP simple_expr RP stmt .  [LCP, RCP, UNDERSCORE, SEMI, IF, WHILE, RETURN, IDENTIFIER]
   30               | IF LP simple_expr RP stmt . ELSE stmt

    ELSE  shift, and go to state 117

    $default  reduce using rule 29 (selection_stmt)

    Conflict between rule 29 and token ELSE resolved as shift (LOWER_THAN_ELSE < ELSE).


State 111

   44 simple_expr: additive_expr relop additive_expr .  [RP, RB, COMMA, SEMI]
   52 additive_expr: additive_expr . addop term
   54 addop: . PLUS
   55      | . MINUS

    PLUS   shift, and go to state 90
    MINUS  shift, and go to state 91

    $default  reduce using rule 44 (simple_expr)

    addop  go to state 99


State 112

   52 additive_expr: additive_expr addop term .  [RP, RB, COMMA, PLUS, MINUS, GE, GT, LE, LT, EQUAL, UNEQUAL, SEMI]
   56 term: term . mulop factor
   58 mulop: . MUL
   59      | . DIV
   60      | . MOD

    MUL  shift, and go to state 100
    DIV  shift, and go to state 101
    MOD  shift, and go to state 102

    $default  reduce using rule 52 (additive_expr)

    mulop  go to state 103


State 113

   56 term: term mulop factor .

    $default  reduce using rule 56 (term)


State 114

   31 iteration_stmt: WHILE LP simple_expr RP stmt .

    $default  reduce using rule 31 (iteration_stmt)


State 115

   69 arg_list: arg_list COMMA simple_expr .

    $default  reduce using rule 69 (arg_list)


State 116

   37 expr_list: expr_list COMMA simple_expr .

    $default  reduce using rule 37 (expr_list)


State 117

   16 compound_stmt: . LCP local_decls stmt_list RCP
   21 stmt: . expr_stmt
   22     | . compound_stmt
   23     | . selection_stmt
   24     | . iteration_stmt
   25     | . return_stmt
   26     | . function_stmt
   27 expr_stmt: . expr SEMI
   28          | . SEMI
   29 selection_stmt: . IF LP simple_expr RP stmt
   30               | . IF LP simple_expr RP stmt ELSE stmt
   30               | IF LP simple_expr RP stmt ELSE . stmt
   31 iteration_stmt: . WHILE LP simple_expr RP stmt
   32 return_stmt: . RETURN INTEGER SEMI
   33            | . RETURN FLOAT SEMI
   34            | . RETURN expr_stmt
   35 function_stmt: . call SEMI
   36 expr: . var_list ASSIGN expr_list
   39 var_list: . var_list COMMA var
   40         | . var
   41         | . UNDERSCORE
   42 var: . IDENTIFIER
   43    | . IDENTIFIER LB simple_expr RB
   66 call: . IDENTIFIER LP args RP

    LCP         shift, and go to state 34
    UNDERSCORE  shift, and go to state 40
    SEMI        shift, and go to state 41
    IF          shift, and go to state 42
    WHILE       shift, and go to state 43
    RETURN      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    compound_stmt   go to state 46
    stmt            go to state 118
    expr_stmt       go to state 48
    selection_stmt  go to state 49
    iteration_stmt  go to state 50
    return_stmt     go to state 51
    function_stmt   go to state 52
    expr            go to state 53
    var_list        go to state 54
    var             go to state 55
    call            go to state 56


State 118

   30 selection_stmt: IF LP simple_expr RP stmt ELSE stmt .

    $default  reduce using rule 30 (selection_stmt)
